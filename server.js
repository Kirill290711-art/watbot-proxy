// src/server.js
import express from "express";
import cors from "cors";

const app = express();

// CORS –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
app.use(cors());
app.use(express.json({ type: "*/*", limit: "1mb" }));

// –Ø–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤—Å–µ—Ö routes
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  next();
});

// ------------------------------
// Healthcheck
// ------------------------------
app.get("/health", (req, res) => {
  res.type("text/plain; charset=utf-8").send(`ok ${new Date().toISOString()}`);
});

// ------------------------------
// 1) –ü—Ä–æ–∫—Å–∏ –¥–ª—è OpenRouter (POST /?url=...)
//    ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ß–ò–°–¢–´–ô —Ç–µ–∫—Å—Ç (–±–µ–∑ JSON-–æ–±—ë—Ä—Ç–æ–∫)
// ------------------------------
app.post("/", async (req, res) => {
  const targetUrl = req.query.url;
  if (!targetUrl) {
    return res
      .status(400)
      .type("text/plain; charset=utf-8")
      .send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä ?url=");
  }

  try {
    console.log("‚û° INCOMING:", {
      method: req.method,
      url: targetUrl,
      headers: req.headers,
      bodyType: typeof req.body
    });

    const allow = [
      "authorization",
      "content-type",
      "x-title",
      "http-referer",
      "referer",
      "accept"
    ];
    const headersToForward = {};
    for (const k of allow) if (req.headers[k]) headersToForward[k] = req.headers[k];
    if (!headersToForward["content-type"]) headersToForward["content-type"] = "application/json";

    const bodyString = typeof req.body === "string" ? req.body : JSON.stringify(req.body);

    const upstream = await fetch(targetUrl, {
      method: "POST",
      headers: headersToForward,
      body: bodyString
    });

    const rawText = await upstream.text();
    console.log("‚¨Ö UPSTREAM STATUS:", upstream.status);
    console.log("‚¨Ö UPSTREAM RAW (first 800):", rawText.slice(0, 800));

    let out = rawText;
    try {
      const data = JSON.parse(rawText);
      if (data?.choices?.[0]?.message?.content) out = data.choices[0].message.content;
      else if (data?.choices?.[0]?.text) out = data.choices[0].text;
      else if (typeof data === "string") out = data;
    } catch {}

    res
      .status(upstream.ok ? 200 : upstream.status)
      .type("text/plain; charset=utf-8")
      .set("Cache-Control", "no-store")
      .send(out);
  } catch (e) {
    console.error("üí• PROXY ERROR:", e);
    res.status(500).type("text/plain; charset=utf-8").send("–û—à–∏–±–∫–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–µ");
  }
});

// ------------------------------
// 2) –ù–æ–≤–æ—Å—Ç–∏ GNews —Å –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä–æ–º –∏ —Ä–∞–Ω–¥–æ–º–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü (1..75)
// ------------------------------
const lastPageMap = new Map();
const keyFor = (endpoint, query, lang, country) =>
  `${endpoint}|${query || ""}|${lang}|${country}`;
const pickRandomPageExcept = (prev, min = 1, max = 75) => {
  if (max <= min) return min;
  let p;
  do p = Math.floor(Math.random() * (max - min + 1)) + min; while (p === prev);
  return p;
};

app.get("/gnews", async (req, res) => {
  try {
    const cat     = (req.query.cat ?? "").toString().trim();
    const qParam  = (req.query.q ?? "").toString().trim();
    const lang    = (req.query.lang ?? "ru").toString();
    const country = (req.query.country ?? "ru").toString();
    const max     = (req.query.max ?? "5").toString();
    const mode    = (req.query.mode ?? "text").toString();

    const token = (process.env.GNEWS_TOKEN || (req.query.token ?? "")).toString();
    if (!token) {
      return res
        .status(400)
        .type("text/plain; charset=utf-8")
        .send('–û—à–∏–±–∫–∞: –Ω–µ—Ç API-–∫–ª—é—á–∞. –î–æ–±–∞–≤—å GNEWS_TOKEN –≤ Render –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π ?token=...');
    }

    let endpoint = "search";
    let query = qParam || cat;

    if (cat === "–ì–ó" || (!query && !qParam && cat === "")) {
      endpoint = "top-headlines";
      query = "";
    }

    const params = new URLSearchParams();
    params.set("lang", lang);
    params.set("country", country);
    params.set("max", max);
    params.set("token", token);

    const key = keyFor(endpoint, query, lang, country);
    const prev = lastPageMap.get(key) ?? null;
    const page = pickRandomPageExcept(prev, 1, 75);
    lastPageMap.set(key, page);
    params.set("page", String(page));

    if (endpoint === "search") {
      if (!query) {
        return res
          .status(400)
          .type("text/plain; charset=utf-8")
          .send('–û—à–∏–±–∫–∞: –¥–ª—è /search –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ?q=... (–∏–ª–∏ ?cat=..., –∫—Ä–æ–º–µ "–ì–ó").');
      }
      params.set("q", query);
    }

    params.set("_t", Math.random().toString(36).slice(2));

    const finalUrl = `https://gnews.io/api/v4/${endpoint}?${params.toString()}`;
    console.log("üîé GNEWS URL:", finalUrl.replace(token, "[HIDDEN]"));

    const upstream = await fetch(finalUrl, {
      method: "GET",
      headers: { Accept: "application/json" }
    });
    const text = await upstream.text();

    if (!upstream.ok) {
      return res.status(upstream.status).type("text/plain; charset=utf-8").send(text);
    }

    if (mode === "raw") {
      return res
        .type("application/json; charset=utf-8")
        .set("Cache-Control", "no-store")
        .send(text);
    }

    let out = "";
    try {
      const data = JSON.parse(text);
      const list = Array.isArray(data?.articles) ? data.articles : [];
      out =
        list.length === 0
          ? "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
          : list
              .slice(0, Number(max) || 5)
              .map((a, i) => {
                const title = a?.title ?? "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞";
                const src = a?.source?.name ? ` ‚Äî ${a.source.name}` : "";
                const url = a?.url ?? "";
                return `${i + 1}. ${title}${src}\n${url}`;
              })
              .join("\n\n");
    } catch {
      out = text;
    }

    res.type("text/plain; charset=utf-8").set("Cache-Control", "no-store").send(out);
  } catch (err) {
    console.error("üí• GNEWS ERROR:", err);
    res.status(500).type("text/plain; charset=utf-8").send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GNews");
  }
});

// ------------------------------
// 3) –°–õ–û–í–ê–†–ò - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —á–µ—Ä–µ–∑ Glosbe.com
// ------------------------------

// --- fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º ---
async function fetchWithTimeout(url, opts = {}, ms = 10000) {
  const ctrl = new AbortController();
  const t = setTimeout(() => ctrl.abort(), ms);
  try {
    return await fetch(url, { ...opts, signal: ctrl.signal });
  } finally {
    clearTimeout(t);
  }
}

// --- –ø–æ—á–∏–Ω–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ ---
function normalizeWordFromQuery(req) {
  let word = (req.query.word ?? "").toString();
  if (word.includes("+")) word = word.replace(/\+/g, " ");
  for (let i = 0; i < 2; i++) {
    try {
      const d = decodeURIComponent(word);
      if (d === word) break;
      word = d;
    } catch { break; }
  }
  if (!/[–ê-–Ø–∞-—è–Å—ë]/.test(word) && /[√ê√ëÔøΩ–†]/.test(word)) {
    const fixed = Buffer.from(word, "latin1").toString("utf8");
    if (/[–ê-–Ø–∞-—è–Å—ë]/.test(fixed)) word = fixed;
  }
  return word.trim();
}

// --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–æ–≤–∞—Ä—è —á–µ—Ä–µ–∑ Glosbe ---
async function wikidictHandler(req, res) {
  const word = normalizeWordFromQuery(req);
  
  try {
    if (!word) {
      return res.status(200).type("text/plain; charset=utf-8").send(
        `üìö -\n–ß–∞—Å—Ç—å —Ä–µ—á–∏: -\n–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ: -\n–°–∏–Ω–æ–Ω–∏–º—ã: -\n–ü—Ä–∏–º–µ—Ä 1: -\n–ü—Ä–∏–º–µ—Ä 2: -`
      );
    }

    console.log("üîé DICT word:", word);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Glosbe API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–µ
    const url = `https://glosbe.com/gapi/translate?from=rus&dest=rus&format=json&phrase=${encodeURIComponent(word)}`;
    
    const response = await fetchWithTimeout(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json'
      }
    }, 8000);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const data = await response.json();
    
    let partOfSpeech = "-";
    let meaning = "-";
    let synonyms = "-";
    let examples = ["-", "-"];

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    if (data.tuc && data.tuc.length > 0) {
      const firstResult = data.tuc[0];
      
      // –ß–∞—Å—Ç—å —Ä–µ—á–∏
      if (firstResult.meanings && firstResult.meanings.length > 0) {
        partOfSpeech = firstResult.meanings[0].text || "-";
      }
      
      // –ó–Ω–∞—á–µ–Ω–∏–µ
      if (firstResult.phrases && firstResult.phrases.length > 0) {
        meaning = firstResult.phrases[0].text || "-";
      }
      
      // –°–∏–Ω–æ–Ω–∏–º—ã (–±–µ—Ä–µ–º –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
      if (data.tuc.length > 1) {
        const syns = data.tuc.slice(1, 4).map(item => {
          if (item.phrases && item.phrases[0]) return item.phrases[0].text;
          return null;
        }).filter(Boolean);
        if (syns.length > 0) synonyms = syns.join(", ");
      }
      
      // –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (data.examples && data.examples.length > 0) {
        examples = data.examples.slice(0, 2).map(ex => ex.text || "-");
      }
    }

    const out = `üìö ${word}\n` +
                `–ß–∞—Å—Ç—å —Ä–µ—á–∏: ${partOfSpeech}\n` +
                `–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ: ${meaning}\n` +
                `–°–∏–Ω–æ–Ω–∏–º—ã: ${synonyms}\n` +
                `–ü—Ä–∏–º–µ—Ä 1: ${examples[0]}\n` +
                `–ü—Ä–∏–º–µ—Ä 2: ${examples[1]}`;

    return res.status(200).type("text/plain; charset=utf-8").set("Cache-Control", "no-store").send(out);

  } catch (error) {
    console.error("üí• DICT ERROR:", error);
    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    const commonWords = {
      "–≥–æ—Ä–æ–¥": ["—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ", "–∫—Ä—É–ø–Ω—ã–π –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç", "–º–µ–≥–∞–ø–æ–ª–∏—Å, –ø–æ—Å–µ–ª–µ–Ω–∏–µ", "–Ø –∂–∏–≤—É –≤ –±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–µ.", "–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º–∏ –ø–∞–º—è—Ç–Ω–∏–∫–∞–º–∏."],
      "–¥–æ–º": ["—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ", "–∑–¥–∞–Ω–∏–µ –¥–ª—è –∂–∏–ª—å—è", "–∑–¥–∞–Ω–∏–µ, –∂–∏–ª–∏—â–µ, —Å—Ç—Ä–æ–µ–Ω–∏–µ", "–ú—ã –∫—É–ø–∏–ª–∏ –Ω–æ–≤—ã–π –¥–æ–º.", "–≠—Ç–æ—Ç –¥–æ–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π."],
      "—á–µ–ª–æ–≤–µ–∫": ["—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ", "—Ä–∞–∑—É–º–Ω–æ–µ –∂–∏–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ", "–ª–∏—á–Ω–æ—Å—Ç—å, –∏–Ω–¥–∏–≤–∏–¥—É—É–º, –æ—Å–æ–±–∞", "–ß–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±—Ä—ã–º.", "–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –º–Ω–µ –ø–æ–º–æ–≥."],
      "–≤–æ–¥–∞": ["—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ", "–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å", "–∂–∏–¥–∫–æ—Å—Ç—å, –≤–ª–∞–≥–∞, H2O", "–Ø –ø—å—é –≤–æ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.", "–í–æ–¥–∞ –≤ —Ä–µ–∫–µ —Ö–æ–ª–æ–¥–Ω–∞—è."],
      "—Å–æ–ª–Ω—Ü–µ": ["—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ", "–∑–≤–µ–∑–¥–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ —Å–∏—Å—Ç–µ–º—ã", "—Å–≤–µ—Ç–∏–ª–æ, –¥–Ω–µ–≤–Ω–æ–µ —Å–≤–µ—Ç–∏–ª–æ", "–°–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏—Ç —è—Ä–∫–æ.", "–ú—ã –≥—Ä–µ–ª–∏—Å—å –Ω–∞ —Å–æ–ª–Ω—Ü–µ."]
    };

    const lowerWord = word.toLowerCase();
    if (commonWords[lowerWord]) {
      const [pos, mean, syn, ex1, ex2] = commonWords[lowerWord];
      const out = `üìö ${word}\n` +
                  `–ß–∞—Å—Ç—å —Ä–µ—á–∏: ${pos}\n` +
                  `–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ: ${mean}\n` +
                  `–°–∏–Ω–æ–Ω–∏–º—ã: ${syn}\n` +
                  `–ü—Ä–∏–º–µ—Ä 1: ${ex1}\n` +
                  `–ü—Ä–∏–º–µ—Ä 2: ${ex2}`;
      return res.status(200).type("text/plain; charset=utf-8").send(out);
    }

    return res.status(200).type("text/plain; charset=utf-8").send(
      `üìö ${word}\n–ß–∞—Å—Ç—å —Ä–µ—á–∏: -\n–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ: -\n–°–∏–Ω–æ–Ω–∏–º—ã: -\n–ü—Ä–∏–º–µ—Ä 1: -\n–ü—Ä–∏–º–µ—Ä 2: -`
    );
  }
}

app.get("/wikidict", wikidictHandler);
app.get("/dict", wikidictHandler);

// ------------------------------
// –ó–∞–ø—É—Å–∫
// ------------------------------
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ watbot-proxy listening on ${PORT}`);
});



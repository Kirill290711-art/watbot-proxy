// src/server.js
import express from "express";
import cors from "cors";

const app = express();

// –ü–∞–º—è—Ç—å –¥–ª—è —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
const shownNewsUrls = new Set();

// CORS –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON
app.use(cors());
app.use(express.json({ type: "/", limit: "1mb" }));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏
app.get("/health", (req, res) => {
  res.type("text/plain; charset=utf-8").send(`ok ${new Date().toISOString()}`);
});

/**
 * 1) –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è OpenRouter (POST /?url=...)
 */
app.post("/", async (req, res) => {
  const targetUrl = req.query.url;
  if (!targetUrl) {
    return res
      .status(400)
      .type("text/plain; charset=utf-8")
      .send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä ?url=");
  }

  try {
    console.log("‚û° INCOMING:", {
      method: req.method,
      url: targetUrl,
      headers: req.headers,
      bodyType: typeof req.body
    });

    const allow = [
      "authorization",
      "content-type",
      "x-title",
      "http-referer",
      "referer",
      "accept"
    ];
    const headersToForward = {};
    for (const k of allow) {
      if (req.headers[k]) headersToForward[k] = req.headers[k];
    }

    if (!headersToForward["content-type"]) {
      headersToForward["content-type"] = "application/json";
    }

    const bodyString =
      typeof req.body === "string" ? req.body : JSON.stringify(req.body);

    const upstream = await fetch(targetUrl, {
      method: "POST",
      headers: headersToForward,
      body: bodyString
    });

    const rawText = await upstream.text();
    console.log("‚¨Ö UPSTREAM STATUS:", upstream.status);
    console.log("‚¨Ö UPSTREAM RAW:", rawText.slice(0, 800));

    let out = rawText;
    try {
      const data = JSON.parse(rawText);
      if (data?.choices?.[0]?.message?.content)
        out = data.choices[0].message.content;
      else if (data?.choices?.[0]?.text) out = data.choices[0].text;
      else if (typeof data === "string") out = data;
    } catch {
      // –Ω–µ JSON
    }

    res
      .status(upstream.ok ? 200 : upstream.status)
      .type("text/plain; charset=utf-8")
      .send(out);
  } catch (e) {
    console.error("üí• PROXY ERROR:", e);
    res
      .status(500)
      .type("text/plain; charset=utf-8")
      .send("–û—à–∏–±–∫–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–µ");
  }
});

/**
 * 2) –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è GNews (GET /gnews)
 */
app.get("/gnews", async (req, res) => {
  try {
    const cat = (req.query.cat ?? "").toString().trim();
    const qParam = (req.query.q ?? "").toString().trim();
    const lang = (req.query.lang ?? "ru").toString();
    const country = (req.query.country ?? "ru").toString();
    const max = (req.query.max ?? "5").toString();
    const mode = (req.query.mode ?? "text").toString();

    const token =
      process.env.GNEWS_TOKEN || (req.query.token ?? "").toString();
    if (!token) {
      return res
        .status(400)
        .type("text/plain; charset=utf-8")
        .send(
          '–û—à–∏–±–∫–∞: –Ω–µ—Ç API-–∫–ª—é—á–∞. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GNEWS_TOKEN –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π ?token=...'
        );
    }

    let endpoint = "search";
    let query = qParam || cat;

    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –≥–ª–∞–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–æ q –Ω–µ –Ω—É–∂–µ–Ω
    if (cat.toLowerCase() === "–≥–ª–∞–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏") {
      endpoint = "top-headlines";
      query = "";
    }

    let articles = [];
    let attempts = 0;

    // –ü—Ä–æ–±—É–µ–º –¥–æ 10 —Ä–∞–∑ –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–≤—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏
    while (articles.length === 0 && attempts < 10) {
      attempts++;

      const page = Math.floor(Math.random() * 75) + 1;

      const params = new URLSearchParams();
      params.set("lang", lang);
      params.set("country", country);
      params.set("max", max);
      params.set("page", page);
      params.set("token", token);
      if (endpoint === "search" && query) {
        params.set("q", query);
      }

      const finalUrl = `https://gnews.io/api/v4/${endpoint}?${params.toString()}`;
      console.log("üîé GNEWS URL:", finalUrl.replace(token, "[HIDDEN]"));

      const upstream = await fetch(finalUrl, {
        method: "GET",
        headers: { Accept: "application/json" }
      });
      if (!upstream.ok) break;

      const data = await upstream.json();
      if (Array.isArray(data?.articles)) {
        const fresh = data.articles.filter(a => !shownNewsUrls.has(a.url));
        if (fresh.length > 0) {
          articles = fresh;
          fresh.forEach(a => shownNewsUrls.add(a.url));
        }
      }
    }

    let out = "";
    if (articles.length === 0) {
      shownNewsUrls.clear();
      out = "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤—Å–µ —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã.";
    } else {
      out = articles
        .slice(0, Number(max) || 5)
        .map((a, i) => {
          const title = a?.title ?? "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞";
          const src = a?.source?.name ? ` ‚Äî ${a.source.name}` : "";
          const url = a?.url ?? "";
          return `${i + 1}. ${title}${src}\n${url}`;
        })
        .join("\n\n");
    }

    res.type("text/plain; charset=utf-8").send(out);
  } catch (err) {
    console.error("üí• GNEWS ERROR:", err);
    res
      .status(500)
      .type("text/plain; charset=utf-8")
      .send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GNews");
  }
});

// –ó–∞–ø—É—Å–∫
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ watbot-proxy listening on ${PORT}






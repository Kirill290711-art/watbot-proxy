// src/server.js
import express from "express";
import cors from "cors";

const app = express();

// CORS –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–ª—è –ª—é–±–æ–≥–æ content-type)
app.use(cors());
app.use(express.json({ type: "/", limit: "1mb" }));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏
app.get("/health", (req, res) => {
  res.type("text/plain; charset=utf-8").send(`ok ${new Date().toISOString()}`);
});

/**
 * 1) –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è OpenRouter (POST /?url=...)
 *    ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ¬´—á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç¬ª –æ—Ç–≤–µ—Ç–∞,
 *      —á—Ç–æ–±—ã Watbot –º–æ–≥ —Å—Ä–∞–∑—É –ø–µ—á–∞—Ç–∞—Ç—å –µ–≥–æ –≤ —á–∞—Ç.
 */
app.post("/", async (req, res) => {
  const targetUrl = req.query.url;
  if (!targetUrl) {
    return res
      .status(400)
      .type("text/plain; charset=utf-8")
      .send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä ?url=");
  }

  try {
    console.log("‚û° INCOMING:", {
      method: req.method,
      url: targetUrl,
      headers: req.headers,
      bodyType: typeof req.body
    });

    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const allow = [
      "authorization",
      "content-type",
      "x-title",
      "http-referer",
      "referer",
      "accept"
    ];
    const headersToForward = {};
    for (const k of allow) {
      if (req.headers[k]) headersToForward[k] = req.headers[k];
    }
    if (!headersToForward["content-type"]) {
      headersToForward["content-type"] = "application/json";
    }

    const bodyString =
      typeof req.body === "string" ? req.body : JSON.stringify(req.body);

    const upstream = await fetch(targetUrl, {
      method: "POST",
      headers: headersToForward,
      body: bodyString
    });

    const rawText = await upstream.text();
    console.log("‚¨Ö UPSTREAM STATUS:", upstream.status);
    console.log("‚¨Ö UPSTREAM RAW:", rawText.slice(0, 800));

    // –î–æ—Å—Ç–∞—ë–º ¬´–≥–æ–ª—ã–π —Ç–µ–∫—Å—Ç¬ª –∏–∑ chat-completions
    let out = rawText;
    try {
      const data = JSON.parse(rawText);
      if (data?.choices?.[0]?.message?.content) {
        out = data.choices[0].message.content;
      } else if (data?.choices?.[0]?.text) {
        out = data.choices[0].text;
      } else if (typeof data === "string") {
        out = data;
      }
    } catch {
      // –Ω–µ JSON ‚Äî –æ—Ç–¥–∞—ë–º –∫–∞–∫ –µ—Å—Ç—å
    }

    res
      .status(upstream.ok ? 200 : upstream.status)
      .type("text/plain; charset=utf-8")
      .send(out);
  } catch (e) {
    console.error("üí• PROXY ERROR:", e);
    res
      .status(500)
      .type("text/plain; charset=utf-8")
      .send("–û—à–∏–±–∫–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–µ");
  }
});

/**
 * 2) GNews (GET /gnews)
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 *   - cat: —Å—Ç—Ä–æ–∫–∞. –ï—Å–ª–∏ "–ì–ó" ‚Üí top-headlines, –∏–Ω–∞—á–µ search –ø–æ cat (–∏–ª–∏ –ø–æ q).
 *   - q:   –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ä—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ cat).
 *   - lang, country, max: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ru, ru, 5 (max ‚Äî —Å–∫–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å).
 *   - token: –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω GNEWS_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
 *   - mode=raw ‚Üí –≤–µ—Ä–Ω—É—Ç—å —Å—ã—Ä–æ–π JSON –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 *   - pageMax: –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 75).
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è:
 *   1) –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é page –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [1..pageMax].
 *   2) –ò–∑ –ø—Ä–∏—à–µ–¥—à–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Å—Ç–∞—Ç–µ–π –¥–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
 *      –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ (shuffle + slice).
 */
app.get("/gnews", async (req, res) => {
  try {
    const cat = (req.query.cat ?? "").toString().trim();
    const qParam = (req.query.q ?? "").toString().trim();
    const lang = (req.query.lang ?? "ru").toString();
    const country = (req.query.country ?? "ru").toString();
    const maxToShow = Math.max(1, parseInt(req.query.max ?? "5", 10));
    const mode = (req.query.mode ?? "text").toString();

    const token =
      process.env.GNEWS_TOKEN || (req.query.token ?? "").toString();
    if (!token) {
      return res
        .status(400)
        .type("text/plain; charset=utf-8")
        .send(
          '–û—à–∏–±–∫–∞: –Ω–µ—Ç API-–∫–ª—é—á–∞. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GNEWS_TOKEN –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π ?token=...'
        );
    }

    // –ö–∞–∫–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º
    let endpoint = "search";
    let query = qParam || cat;
    if (cat === "–ì–ó" || (!query && !qParam && cat === "")) {
      endpoint = "top-headlines"; // –≥–ª–∞–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    }

    // –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1..75)
    const pageMax = Math.max(1, parseInt(req.query.pageMax ?? "75", 10));
    const page = Math.floor(Math.random() * pageMax) + 1;

    // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ GNews
    const params = new URLSearchParams();
    params.set("lang", lang);
    params.set("country", country);
    // –ü—Ä–æ—Å–∏–º —á—É—Ç–∫–∞ –±–æ–ª—å—à–µ —Å—Ç–∞—Ç–µ–π, —á–µ–º –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –∏–∑ —á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å.
    // –ï—Å–ª–∏ —É —Ç–µ–±—è –∂—ë—Å—Ç–∫–æ –Ω—É–∂–Ω–æ —Ä–æ–≤–Ω–æ max –≤—ã–∫–∞—á–∏–≤–∞—Ç—å ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ maxToShow.
    const fetchMax = Math.max(maxToShow, 15); // –ø—É–ª –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏
    params.set("max", String(fetchMax));
    params.set("page", String(page));
    params.set("token", token);

    if (endpoint === "search") {
      if (!query) {
        return res
          .status(400)
          .type("text/plain; charset=utf-8")
          .send(
            '–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä q –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è /search. –ü–µ—Ä–µ–¥–∞–π ?q=... –∏–ª–∏ ?cat=... (–∫—Ä–æ–º–µ "–ì–ó").'
          );
      }
      params.set("q", query); // URLSearchParams —Å–∞–º –∑–∞–∫–æ–¥–∏—Ä—É–µ—Ç Unicode
    }

    const finalUrl = `https://gnews.io/api/v4/${endpoint}?${params.toString()}`;
    // –ù–µ —Å–≤–µ—Ç–∏–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–≥–∞—Ö
    console.log("üîé GNEWS URL:", finalUrl.replace(token, "<TOKEN>"));

    const upstream = await fetch(finalUrl, {
      method: "GET",
      headers: { Accept: "application/json" }
    });

    const text = await upstream.text();
    if (!upstream.ok) {
      // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ GNews (—Ç–∞–∫ –ø–æ–Ω—è—Ç–Ω–µ–µ, —á—Ç–æ –Ω–µ —Ç–∞–∫)
      return res
        .status(upstream.status)
        .type("text/plain; charset=utf-8")
        .send(text);
    }

    if (mode === "raw") {
      res.type("application/json; charset=utf-8").send(text);
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –∏ –°–õ–£–ß–ê–ô–ù–£–Æ –≤—ã–±–æ—Ä–∫—É —Å—Ç–∞—Ç–µ–π
    let out = "";
    try {
      const data = JSON.parse(text);
      const all = Array.isArray(data?.articles) ? data.articles : [];

      // –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏ –ø–æ URL
      const byUrl = new Map();
      for (const a of all) {
        const u = (a?.url ?? "").trim();
        if (!byUrl.has(u) && u) byUrl.set(u, a);
      }
      const pool = Array.from(byUrl.values());

      // Fisher‚ÄìYates shuffle
      for (let i = pool.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [pool[i], pool[j]] = [pool[j], pool[i]];
      }

      const picked = pool.slice(0, maxToShow);

      if (picked.length === 0) {
        out = "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
      } else {
        out = picked
          .map((a, i) => {
            const title = a?.title ?? "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞";
            const src = a?.source?.name ? ` ‚Äî ${a.source.name}` : "";
            const url = a?.url ?? "";
            return `${i + 1}. ${title}${src}\n${url}`;
          })
          .join("\n\n");
      }
    } catch {
      // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–Ω–µ–∑–∞–ø–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –æ—Ç–¥–∞—ë–º –∫–∞–∫ –µ—Å—Ç—å
      out = text;
    }

    res.type("text/plain; charset=utf-8").send(out);
  } catch (err) {
    console.error("üí• GNEWS ERROR:", err);
    res
      .status(500)
      .type("text/plain; charset=utf-8")
      .send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GNews");
  }
});

// –ó–∞–ø—É—Å–∫
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ watbot-proxy listening on ${PORT}`);
});





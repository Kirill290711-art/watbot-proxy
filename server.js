// src/server.js
import express from "express";
import cors from "cors";

const app = express();

// CORS –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON
app.use(cors());
app.use(express.json({ type: "*/*", limit: "1mb" }));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏
app.get("/health", (req, res) => {
  res.type("text/plain; charset=utf-8").send(`ok ${new Date().toISOString()}`);
});

/**
 * 1) –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è OpenRouter (POST /?url=...)
 *    ‚Äî –æ—Ç–¥–∞—ë—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Watbot (–±–µ–∑ JSON-–æ–±—ë—Ä—Ç–æ–∫)
 */
app.post("/", async (req, res) => {
  const targetUrl = req.query.url;
  if (!targetUrl) {
    return res
      .status(400)
      .type("text/plain; charset=utf-8")
      .send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä ?url=");
  }

  try {
    console.log("‚û° INCOMING:", {
      method: req.method,
      url: targetUrl,
      headers: req.headers,
      bodyType: typeof req.body
    });

    const allow = [
      "authorization",
      "content-type",
      "x-title",
      "http-referer",
      "referer",
      "accept"
    ];
    const headersToForward = {};
    for (const k of allow) {
      if (req.headers[k]) headersToForward[k] = req.headers[k];
    }

    if (!headersToForward["content-type"]) {
      headersToForward["content-type"] = "application/json";
    }

    const bodyString =
      typeof req.body === "string" ? req.body : JSON.stringify(req.body);

    const upstream = await fetch(targetUrl, {
      method: "POST",
      headers: headersToForward,
      body: bodyString
    });

    const rawText = await upstream.text();
    console.log("‚¨Ö UPSTREAM STATUS:", upstream.status);
    console.log("‚¨Ö UPSTREAM RAW:", rawText.slice(0, 800));

    // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º ¬´—á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç¬ª –∏–∑ chat-completions
    let out = rawText;
    try {
      const data = JSON.parse(rawText);
      if (data?.choices?.[0]?.message?.content) {
        out = data.choices[0].message.content;
      } else if (data?.choices?.[0]?.text) {
        out = data.choices[0].text;
      } else if (typeof data === "string") {
        out = data;
      }
    } catch {
      // –Ω–µ JSON ‚Äî –æ—Ç–¥–∞—ë–º –∫–∞–∫ –µ—Å—Ç—å
    }

    res
      .status(upstream.ok ? 200 : upstream.status)
      .type("text/plain; charset=utf-8")
      .set("Cache-Control", "no-store")
      .send(out);
  } catch (e) {
    console.error("üí• PROXY ERROR:", e);
    res
      .status(500)
      .type("text/plain; charset=utf-8")
      .send("–û—à–∏–±–∫–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–µ");
  }
});

/**
 * 2) GNews —Å –∞–Ω—Ç–∏–ø–æ–≤—Ç–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü (GET /gnews)
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 *  - cat: –∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Å—Ç—Ä–æ–∫–∞). "–ì–ó" ‚Üí top-headlines
 *  - q:   —è–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç cat, –∫—Ä–æ–º–µ "–ì–ó")
 *  - lang, country, max: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ru, ru, 5
 *  - token: –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω GNEWS_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 *  - mode=raw ‚Üí –≤–µ—Ä–Ω—É—Ç—å —Å—ã—Ä–æ–π JSON; –∏–Ω–∞—á–µ ‚Äî —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫
 *
 * –ê–Ω—Ç–∏–ø–æ–≤—Ç–æ—Ä:
 *  - –¥–ª—è –∫–∞–∂–¥–æ–π ¬´—Å—Ü–µ–Ω–∞—Ä–Ω–æ–π —Å–≤—è–∑–∫–∏¬ª (endpoint+query+lang+country) –ø–æ–º–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É;
 *  - –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Å–ª—É—á–∞–π–Ω–∞—è 1..75, –Ω–æ –Ω–µ —Ä–∞–≤–Ω–∞—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–ª—è —ç—Ç–æ–π —Å–≤—è–∑–∫–∏.
 */

// –≤ –ø–∞–º—è—Ç–∏: –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ –∫–ª—é—á—É (endpoint|query|lang|country)
const lastPageMap = new Map();

function keyFor(endpoint, query, lang, country) {
  return `${endpoint}|${query || ""}|${lang}|${country}`;
}

function pickRandomPageExcept(prev, min = 1, max = 75) {
  if (max <= min) return min;
  let p;
  do {
    p = Math.floor(Math.random() * (max - min + 1)) + min; // [min..max]
  } while (p === prev);
  return p;
}

app.get("/gnews", async (req, res) => {
  try {
    const cat = (req.query.cat ?? "").toString().trim();
    const qParam = (req.query.q ?? "").toString().trim();
    const lang = (req.query.lang ?? "ru").toString();
    const country = (req.query.country ?? "ru").toString();
    const max = (req.query.max ?? "5").toString();
    const mode = (req.query.mode ?? "text").toString();

    const token =
      process.env.GNEWS_TOKEN || (req.query.token ?? "").toString();
    if (!token) {
      return res
        .status(400)
        .type("text/plain; charset=utf-8")
        .send(
          '–û—à–∏–±–∫–∞: –Ω–µ—Ç API-–∫–ª—é—á–∞. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GNEWS_TOKEN –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π ?token=...'
        );
    }

    let endpoint = "search";
    let query = qParam || cat;

    // "–ì–ª–∞–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏"
    if (cat === "–ì–ó" || (!query && !qParam && cat === "")) {
      endpoint = "top-headlines";
      query = ""; // –¥–ª—è top-headlines q –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    }

    // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = new URLSearchParams();
    params.set("lang", lang);
    params.set("country", country);
    params.set("max", max);
    params.set("token", token);

    // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∞–Ω—Ç–∏–ø–æ–≤—Ç–æ—Ä–æ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–≤—è–∑–∫–∏
    const key = keyFor(endpoint, query, lang, country);
    const prevPage = lastPageMap.get(key) ?? null;
    const page = pickRandomPageExcept(prevPage, 1, 75);
    lastPageMap.set(key, page);
    params.set("page", String(page));

    if (endpoint === "search") {
      if (!query) {
        return res
          .status(400)
          .type("text/plain; charset=utf-8")
          .send(
            '–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä q –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è /search. –ü–µ—Ä–µ–¥–∞–π ?q=... –∏–ª–∏ ?cat=... (–∫—Ä–æ–º–µ "–ì–ó").'
          );
      }
      // URLSearchParams —Å–∞–º –∑–∞–∫–æ–¥–∏—Ä—É–µ—Ç Unicode
      params.set("q", query);
    }

    // –∞–Ω—Ç–∏‚Äë–∫—ç—à, —á—Ç–æ–±—ã CDN –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–ª –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
    params.set("_t", Math.random().toString(36).slice(2));

    const finalUrl = `https://gnews.io/api/v4/${endpoint}?${params.toString()}`;
    console.log("üîé GNEWS URL:", finalUrl.replace(token, "[HIDDEN]"));

    const upstream = await fetch(finalUrl, {
      method: "GET",
      headers: { Accept: "application/json" }
    });

    const text = await upstream.text();
    if (!upstream.ok) {
      return res
        .status(upstream.status)
        .type("text/plain; charset=utf-8")
        .send(text);
    }

    if (mode === "raw") {
      res
        .type("application/json; charset=utf-8")
        .set("Cache-Control", "no-store")
        .send(text);
      return;
    }

    // –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫
    let out = "";
    try {
      const data = JSON.parse(text);
      const list = Array.isArray(data?.articles) ? data.articles : [];
      if (list.length === 0) {
        out = "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
      } else {
        out = list
          .slice(0, Number(max) || 5)
          .map((a, i) => {
            const title = a?.title ?? "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞";
            const src = a?.source?.name ? ` ‚Äî ${a.source.name}` : "";
            const url = a?.url ?? "";
            return `${i + 1}. ${title}${src}\n${url}`;
          })
          .join("\n\n");
      }
    } catch {
      // –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–Ω–µ–∑–∞–ø–Ω–æ –Ω–µ JSON ‚Äî –æ—Ç–¥–∞–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
      out = text;
    }

    res
      .type("text/plain; charset=utf-8")
      .set("Cache-Control", "no-store")
      .send(out);
  } catch (err) {
    console.error("üí• GNEWS ERROR:", err);
    res
      .status(500)
      .type("text/plain; charset=utf-8")
      .send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GNews");
  }
});

// –ó–∞–ø—É—Å–∫
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ watbot-proxy listening on ${PORT}`);
});
